{-
 TASK 2 - Matrix multiplier
 Write the method that multiplies one matrix by another.
 The 1st and 2nd parameter of the function will contain
 a matrix implemented using tuples (eg: [[1,2], [3,4]]).
 Matrices can be of different sizes, ranging from 4x4
 up to 32x32.
 Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
 After calculating the result matrix, the function should return final result (as tuple).
-}

int tlen(tuple t) asm "TLEN";

() recv_internal() {
}

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
 tuple matrixAB = empty_tuple();
 tuple tempTuple = empty_tuple();

 int numberOfRowsA = matrixA.tlen();
 int numberOfRowsB = matrixB.tlen();
 if (numberOfRowsA == 0 | (numberOfRowsB == 0))
 {
    return empty_tuple();
 }

 int numberOfColumnsA = matrixA.at(0).tlen();
 int numberOfColumnsB = matrixB.at(0).tlen();
 if ((numberOfColumnsA == 0) | (numberOfColumnsB == 0))
 {
    return empty_tuple();
 }

 int columnCounter = 0;
 int rowCounter = 0;
 int columnACounter = 0;
 int numberResult = 0;
 while(columnCounter < numberOfRowsA){
   tempTuple = empty_tuple();
   rowCounter = 0;
   while(rowCounter < numberOfColumnsB){
     numberResult = 0;
     columnACounter = 0;
     while(columnACounter < numberOfColumnsA){
       numberResult = numberResult + ( matrixA.at(columnCounter).at(columnACounter) * matrixB.at(columnACounter).at(rowCounter) );
       columnACounter += 1;
     }
     tempTuple~tpush(numberResult);
     rowCounter += 1;
   }
   matrixAB~tpush(rowTuple);
   columnCounter += 1;
 }

 return matrixAB;
}